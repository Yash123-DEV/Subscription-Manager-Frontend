{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureNativeModulesAreInstalled = ensureNativeModulesAreInstalled;\nvar _NativeModules = _interopRequireDefault(require(\"react-native-web/dist/exports/NativeModules\"));\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\nvar _index = require(\"./web/index\");\nfunction ensureNativeModulesAreInstalled() {\n  if (globalThis.expo) {\n    return;\n  }\n  try {\n    if (_Platform.default.OS === 'web') {\n      (0, _index.registerWebGlobals)();\n    } else {\n      var _NativeModules$ExpoMo;\n      (_NativeModules$ExpoMo = _NativeModules.default.ExpoModulesCore) == null ? void 0 : _NativeModules$ExpoMo.installModules();\n    }\n  } catch (error) {\n    console.error(`Unable to install Expo modules: ${error}`);\n  }\n}","map":{"version":3,"names":["_index","require","ensureNativeModulesAreInstalled","globalThis","expo","Platform","OS","registerWebGlobals","_NativeModules$ExpoMo","NativeModules","ExpoModulesCore","installModules","error","console"],"sources":["C:/Users/Shubh/OneDrive/Desktop/Subscription-Manager-frontend/Subscription-Manager-Frontend/node_modules/expo-modules-core/src/ensureNativeModulesAreInstalled.ts"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nimport { registerWebGlobals } from './web/index';\n\n/**\n * Ensures that the native modules are installed in the current runtime.\n * Otherwise, it synchronously calls a native function that installs them.\n */\nexport function ensureNativeModulesAreInstalled(): void {\n  if (globalThis.expo) {\n    return;\n  }\n  try {\n    if (Platform.OS === 'web') {\n      // Requiring web folder sets up the `globalThis.expo` object.\n      registerWebGlobals();\n    } else {\n      // TODO: ExpoModulesCore shouldn't be optional here,\n      // but to keep backwards compatibility let's just ignore it in SDK 50.\n      // In most cases the modules were already installed from the native side.\n      NativeModules.ExpoModulesCore?.installModules();\n    }\n  } catch (error) {\n    console.error(`Unable to install Expo modules: ${error}`);\n  }\n}\n"],"mappings":";;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AAMO,SAASC,+BAA+BA,CAAA,EAAS;EACtD,IAAIC,UAAU,CAACC,IAAI,EAAE;IACnB;EACF;EACA,IAAI;IACF,IAAIC,iBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;MAEzB,IAAAC,yBAAkB,EAAC,CAAC;IACtB,CAAC,MAAM;MAAA,IAAAC,qBAAA;MAIL,CAAAA,qBAAA,GAAAC,sBAAa,CAACC,eAAe,qBAA7BF,qBAAA,CAA+BG,cAAc,CAAC,CAAC;IACjD;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCA,KAAK,EAAE,CAAC;EAC3D;AACF","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}